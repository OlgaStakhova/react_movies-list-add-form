{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","required","onChange","count","useState","Math","random","toString","slice","id","touched","setToched","hasError","htmlFor","classNames","type","placeholder","event","target","onBlur","NewMovie","onAdd","setCount","setTittle","setDescription","setImgUrl","setImdbUrl","setImdbId","movieCounter","setMovieCounter","requiredControl","length","useEffect","fieldController","Object","values","filter","item","handlerInput","onSubmit","preventDefault","disabled","App","setMovies","moviesFromServer","prevMovie","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e75d8c2d.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  onChange?: (name: string, value: string) => void,\n  count: number,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange = () => {},\n  count,\n}) => {\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  const [touched, setToched] = useState(false);\n  const hasError = touched && required && !value && count !== 0;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={event => onChange(name, event.target.value)}\n          onBlur={() => {\n            setToched(true);\n          }}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n    </div>\n  );\n};\n","import { FormEvent, useEffect, useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (movie: Movie) => void\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n  const [title, setTittle] = useState('');\n  const [description, setDescription] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n  const [movieCounter, setMovieCounter] = useState(0);\n\n  const requiredControl = [title, imgUrl, imdbUrl, imdbId].length;\n\n  const resetForm = () => {\n    setCount(0);\n    setTittle('');\n    setDescription('');\n    setImgUrl('');\n    setImdbUrl('');\n    setImdbId('');\n  };\n\n  useEffect(() => {\n    const fieldController = {\n      title: { value: title, required: true },\n      description: { value: description, required: false },\n      imgUrl: { value: imgUrl, required: true },\n      imdbUrl: { value: imdbUrl, required: true },\n      imdbId: { value: imdbId, required: true },\n    };\n\n    setCount(Object.values(fieldController).filter(item => {\n      return item.value && item.required;\n    }).length);\n  }, [title,\n    description,\n    imgUrl,\n    imdbUrl,\n    imdbId]);\n\n  const handlerInput = (name: string, value: string) => {\n    switch (name) {\n      case 'title':\n        setTittle(value);\n        break;\n      case 'description':\n        setDescription(value);\n        break;\n      case 'imgUrl':\n        setImgUrl(value);\n        break;\n      case 'imdbUrl':\n        setImdbUrl(value);\n        break;\n      case 'imdbId':\n        setImdbId(value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handelSubmitForm = (event: FormEvent) => {\n    event.preventDefault();\n\n    const newMovie: Movie = {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    };\n\n    onAdd(newMovie);\n    resetForm();\n    setMovieCounter(movieCounter + 1);\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      onSubmit={handelSubmitForm}\n      key={movieCounter}\n    >\n      <h2 className=\"title\">\n        Add a movie\n      </h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={handlerInput}\n        count={count}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={handlerInput}\n        count={count}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={handlerInput}\n        count={count}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={handlerInput}\n        count={count}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={handlerInput}\n        count={count}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={count < requiredControl}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useEffect, useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[] | []>([]);\n\n  useEffect(() => {\n    setMovies(() => [...moviesFromServer]);\n  }, []);\n\n  const addMovieHandler = (movie: Movie) => {\n    setMovies((prevMovie) => ([...prevMovie, movie]));\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovieHandler} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}